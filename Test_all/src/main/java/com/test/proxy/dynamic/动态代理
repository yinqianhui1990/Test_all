我们来看上面的UserManagerImplProxy类，
它的两个方法System.out.println("start-->addUser()")和System.out.println("success-->addUser()")，
这是做核心动作之前和之后的两个截取段，正是这两个截取段，却是我们AOP的基础，在OOP里，
System.out.println("start-->addUser()")、核心动作、System.out.println("success-->addUser()")
这个三个动作在多个类里始终在一起，但他们所要完成的逻辑却是不同的，
如System.out.println("start-->addUser()")里做的可能是权限的判断，
在所有类中它都是做权限判断，而在每个类里核心动作却各不相同，
System.out.println("success-->addUser()")可能做的是日志
，在所有类里它都做日志。正是因为在所有的类里，
核心代码之前的操作和核心代码之后的操作都做的是同样的逻辑
，因此我们需要将它们提取出来，单独分析，设计和编码，
这就是我们的AOP思想。一句话说，AOP只是在对OOP的基础上进行进一步抽象，使我们的类的职责更加单一。

动态代理优点：

动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器
一个集中的方法中处理（InvocationHandler.invoke）。这样，在接口方法数量比较多
的时候，我们可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。
而且动态代理的应用使我们的类职责更加单一，复用性更强